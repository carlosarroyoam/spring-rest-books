openapi: 3.0.1
info:
  title: Spring REST Books API
  description: |
    A comprehensive REST API for managing a bookstore system including 
    books, authors, customers, carts, orders, payments and shipments.

    ## Features
    - Books.
    - Authors.
    - Customers.
    - Carts.
    - Orders.
    - Payments.
    - Shipments.
  contact:
    email: carlosarroyoam@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8081
    description: Localhost server url
tags:
  - name: Books
    description: Operations about books
  - name: Authors
    description: Operations about authors
  - name: Customers
    description: Operations about customers
  - name: Carts
    description: Operations about carts
  - name: Orders
    description: Operations about orders
  - name: Payments
    description: Operations about payments
  - name: Shipments
    description: Operations about shipments

paths:
  /books:
    get:
      tags:
        - Books
      summary: Gets the list of books
      operationId: findAllBooks
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
        - name: isbn
          in: query
          required: false
          schema:
            type: string
            minLength: 10
            maxLength: 17
        - name: title
          in: query
          required: false
          schema:
            type: string
            maxLength: 128
        - name: authorIds
          in: query
          required: false
          schema:
            type: string
        - name: isAvailableOnline
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    post:
      tags:
        - Books
      summary: Creates a new book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookRequestDto"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /books/{bookId}:
    get:
      tags:
        - Books
      summary: Gets a book by its id
      operationId: findBookById
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
        - Books
      summary: Updates a book by its id
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookRequestDto"
        required: true
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Books
      summary: Deletes a book by its id
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /books/{bookId}/authors:
    get:
      tags:
        - Books
      summary: Gets the list of authors by bookId
      operationId: findBookAuthors
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthorDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

  /authors:
    get:
      tags:
        - Authors
      summary: Gets the list of authors
      operationId: findAllAuthors
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
        - name: name
          in: query
          required: false
          schema:
            type: string
            maxLength: 128
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthorDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    post:
      tags:
        - Authors
      summary: Creates a new author
      operationId: createAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuthorRequestDto"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /authors/{authorId}:
    get:
      tags:
        - Authors
      summary: Gets an author by its id
      operationId: findAuthorById
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
        - Authors
      summary: Updates an author by its id
      operationId: updateAuthor
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAuthorRequestDto"
        required: true
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Authors
      summary: Deletes an author by its id
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /authors/{authorId}/books:
    get:
      tags:
        - Authors
      summary: Gets the list of books by authorId
      operationId: findAuthorBooks
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

  /customers:
    get:
      tags:
        - Customers
      summary: Gets the list of customers
      operationId: findAllCustomers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
        - name: firstName
          in: query
          required: false
          schema:
            type: string
            maxLength: 128
        - name: lastName
          in: query
          required: false
          schema:
            type: string
            maxLength: 128
        - name: email
          in: query
          required: false
          schema:
            type: string
            maxLength: 128
        - name: username
          in: query
          required: false
          schema:
            type: string
            maxLength: 128
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomerDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    post:
      tags:
        - Customers
      summary: Creates a new customer
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerRequestDto"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Gets a customer by its id
      operationId: findCustomerById
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
        - Customers
      summary: Updates a customer by its id
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCustomerRequestDto"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Customers
      summary: Deletes a customer by its id
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

  /carts:
    get:
      tags:
        - Carts
      summary: Gets the customer cart
      operationId: findCart
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /carts/items:
    put:
      tags:
        - Carts
      summary: Updates a cart item
      operationId: updateCartItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCartItemRequestDto"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /carts/items/{cartItemId}:
    delete:
      tags:
        - Carts
      summary: Deletes a cart item
      operationId: deleteCartItem
      parameters:
        - name: cartItemId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

  /orders:
    get:
      tags:
        - Orders
      summary: Gets the list of orders
      operationId: findAllOrders
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    post:
      tags:
        - Orders
      summary: Creates a new order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequestDto"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Gets an order by its id
      operationId: findOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
        - Orders
      summary: Updates an order by its id
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderRequestDto"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Orders
      summary: Deletes an order by its id
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

  /payments:
    get:
      tags:
        - Payments
      summary: Gets the list of payments
      operationId: findAllPayments
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    post:
      tags:
        - Payments
      summary: Creates a new payment
      operationId: createPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentRequestDto"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /payments/{paymentId}:
    get:
      tags:
        - Payments
      summary: Gets a payment by its id
      operationId: findPaymentById
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/PaymentDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

  /shipments:
    get:
      tags:
        - Shipments
      summary: Gets the list of shipments
      operationId: findAllShipments
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShipmentDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /shipments/{shipmentId}:
    get:
      tags:
        - Shipments
      summary: Gets an shipment by its id
      operationId: findShipmentById
      parameters:
        - name: shipmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShipmentDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

components:
  schemas:
    CreateBookRequestDto:
      required:
        - cover_url
        - is_available_online
        - isbn
        - price
        - published_at
        - title
      type: object
      properties:
        isbn:
          type: string
          maxLength: 17
          minLength: 10
        title:
          type: string
          maxLength: 128
          minLength: 3
        cover_url:
          type: string
          maxLength: 512
          minLength: 3
        price:
          type: number
        is_available_online:
          type: boolean
        published_at:
          type: string
          format: date
    UpdateBookRequestDto:
      required:
        - cover_url
        - is_available_online
        - isbn
        - price
        - published_at
        - title
      type: object
      properties:
        isbn:
          type: string
          maxLength: 17
          minLength: 10
        title:
          type: string
          maxLength: 128
          minLength: 3
        cover_url:
          type: string
          maxLength: 512
          minLength: 3
        price:
          type: number
        is_available_online:
          type: boolean
        published_at:
          type: string
          format: date
    CreateAuthorRequestDto:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          maxLength: 128
          minLength: 3
    UpdateAuthorRequestDto:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          maxLength: 128
          minLength: 3
    CreateCustomerRequestDto:
      required:
        - first_name
        - last_name
        - username
        - email
      type: object
      properties:
        first_name:
          maxLength: 128
          minLength: 3
          type: string
        last_name:
          maxLength: 128
          minLength: 3
          type: string
        email:
          maxLength: 128
          minLength: 3
          type: string
        username:
          maxLength: 128
          minLength: 3
          type: string
    UpdateCustomerRequestDto:
      required:
        - first_name
        - last_name
      type: object
      properties:
        first_name:
          maxLength: 128
          minLength: 3
          type: string
        last_name:
          maxLength: 128
          minLength: 3
          type: string
    AddCartItemRequestDto:
      required:
        - book_id
        - shipping_address
        - billing_address
        - items
      type: object
      properties:
        book_id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
          minimum: 1
    UpdateCartItemRequestDto:
      required:
        - book_id
        - shipping_address
        - billing_address
        - items
      type: object
      properties:
        book_id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
          minimum: 1
    CreateOrderRequestDto:
      required:
        - customer_id
        - shipping_address
        - billing_address
        - items
      type: object
      properties:
        customer_id:
          type: integer
          format: int64
        shipping_address:
          type: string
          maxLength: 512
          minLength: 10
        billing_address:
          type: string
          maxLength: 512
          minLength: 10
        notes:
          type: string
          maxLength: 1000
        items:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/CreateOrderItemRequestDto"
    UpdateOrderRequestDto:
      required:
        - shipping_address
        - billing_address
      type: object
      properties:
        shipping_address:
          type: string
          maxLength: 512
          minLength: 10
        billing_address:
          type: string
          maxLength: 512
          minLength: 10
        notes:
          type: string
          maxLength: 1000
    CreateOrderItemRequestDto:
      required:
        - book_id
        - quantity
      type: object
      properties:
        book_id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
          minimum: 1
    CreatePaymentRequestDto:
      required:
        - order_id
        - method
      type: object
      properties:
        order_id:
          type: integer
          format: int64
        method:
          type: string
          enum:
            - CREDIT_CARD
            - DEBIT_CARD
            - PAYPAL
            - BANK_TRANSFER
            - CASH_ON_DELIVERY
    BookDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        isbn:
          type: string
        title:
          type: string
        cover_url:
          type: string
        authors:
          type: array
          items:
            $ref: "#/components/schemas/AuthorDto"
        price:
          type: number
        is_available_online:
          type: boolean
        published_at:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AuthorDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CustomerDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        username:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    OrderDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        order_number:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - CONFIRMED
            - PROCESSING
            - SHIPPED
            - DELIVERED
            - CANCELLED
            - REFUNDE
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItemDto"
        subtotal:
          type: number
        tax_amount:
          type: number
        shipping_amount:
          type: number
        total:
          type: number
        customer:
          type: object
          $ref: "#/components/schemas/CustomerDto"
        payment:
          type: object
          $ref: "#/components/schemas/PaymentDto"
        shipment:
          type: object
          $ref: "#/components/schemas/ShipmentDto"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    OrderItemDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        quantity:
          type: number
        unit_price:
          type: number
        total_price:
          type: number
        book_id:
          type: number
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CartDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItemDto"
        customer:
          type: object
          $ref: "#/components/schemas/CustomerDto"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CartItemDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        quantity:
          type: number
        book_id:
          type: number
          format: int64
        added_at:
          type: string
          format: date-time
    PaymentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        amount:
          type: number
        method:
          type: string
          enum:
            - CREDIT_CARD
            - DEBIT_CARD
            - PAYPAL
            - BANK_TRANSFER
            - CASH_ON_DELIVERY
        status:
          type: string
          enum:
            - PENDING
            - COMPLETED
            - FAILED
            - CANCELLED
            - REFUNDED
        transaction_id:
          type: string
        order_id:
          type: number
          format: int64
    ShipmentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        attention_name:
          type: string
        address:
          type: string
        phone:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - SHIPPED
            - DELIVERED
            - RETURNED
            - CANCELLED
        order_id:
          type: integer
          format: int64
    AppExceptionDto:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        status:
          type: integer
        details:
          type: object
          additionalProperties:
            type: string
        path:
          type: string
        timestamp:
          format: date-time

  responses:
    Created:
      description: Created
    NoContent:
      description: No content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
