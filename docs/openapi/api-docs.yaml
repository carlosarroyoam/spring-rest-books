openapi: 3.0.1
info:
  title: Spring REST Books API
  description: |
    A comprehensive REST API for managing a bookstore system including users,
    books, authors, shopping cart, orders, payments, shipments and notifications.

    ## Features
    - Users.
    - Books.
    - Authors.
    - Shopping cart.
    - Orders.
    - Payments.
    - Shipments.
    - Notifications.
  contact:
    email: carlosarroyoam@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8081
    description: Localhost server url
tags:
  - name: Users
    description: Operations about users
  - name: Books
    description: Operations about books
  - name: Authors
    description: Operations about authors
  - name: Shopping cart
    description: Operations about shopping cart
  - name: Orders
    description: Operations about orders
  - name: Payments
    description: Operations about payments
  - name: Shipments
    description: Operations about shipments
  - name: Notifications
    description: Operations about notifications
paths:
  /users:
    get:
      tags:
        - Users
      summary: Gets the list of users
      operationId: findAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    post:
      tags:
        - Users
      summary: Creates a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestDto"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Gets a user by its id
      operationId: findUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
        - Users
      summary: Updates a user by its id
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: Deletes a user by its id
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

  /books:
    get:
      tags:
        - Books
      summary: Gets the list of books
      operationId: findAllBooks
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    post:
      tags:
        - Books
      summary: Creates a new book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookRequestDto"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /books/{bookId}:
    get:
      tags:
        - Books
      summary: Gets a book by its id
      operationId: findBookById
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
        - Books
      summary: Updates a book by its id
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookRequestDto"
        required: true
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Books
      summary: Deletes a book by its id
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /books/{bookId}/authors:
    get:
      tags:
        - Books
      summary: Gets the list of authors by bookId
      operationId: findBookAuthors
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthorDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

  /authors:
    get:
      tags:
        - Authors
      summary: Gets the list of authors
      operationId: findAllAuthors
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthorDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    post:
      tags:
        - Authors
      summary: Creates a new author
      operationId: createAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuthorRequestDto"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /authors/{authorId}:
    get:
      tags:
        - Authors
      summary: Gets an author by its id
      operationId: findAuthorById
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
        - Authors
      summary: Updates a author by its id
      operationId: updateAuthor
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAuthorRequestDto"
        required: true
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Authors
      summary: Deletes a author by its id
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
      security:
        - bearerAuth: []
  /authors/{authorId}/books:
    get:
      tags:
        - Authors
      summary: Gets the list of books by authorId
      operationId: findAuthorBooks
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookDto"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []

components:
  schemas:
    CreateUserRequestDto:
      required:
        - age
        - email
        - name
        - role_id
        - username
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 3
          type: string
        age:
          type: string
          format: byte
        email:
          maxLength: 128
          minLength: 3
          type: string
        username:
          maxLength: 128
          minLength: 3
          type: string
        role_id:
          type: integer
          format: int32
    UpdateUserRequestDto:
      required:
        - age
        - name
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 3
          type: string
        age:
          type: string
          format: byte
    CreateBookRequestDto:
      required:
        - cover_url
        - is_available_online
        - isbn
        - price
        - published_at
        - title
      type: object
      properties:
        isbn:
          maxLength: 17
          minLength: 10
          type: string
        title:
          maxLength: 128
          minLength: 3
          type: string
        cover_url:
          maxLength: 512
          minLength: 3
          type: string
        price:
          type: number
        is_available_online:
          type: boolean
        published_at:
          type: string
          format: date
    UpdateBookRequestDto:
      required:
        - cover_url
        - is_available_online
        - isbn
        - price
        - published_at
        - title
      type: object
      properties:
        isbn:
          maxLength: 17
          minLength: 10
          type: string
        title:
          maxLength: 128
          minLength: 3
          type: string
        cover_url:
          maxLength: 512
          minLength: 3
          type: string
        price:
          type: number
        is_available_online:
          type: boolean
        published_at:
          type: string
          format: date
    CreateAuthorRequestDto:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 3
          type: string
    UpdateAuthorRequestDto:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 3
          type: string
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: string
          format: byte
        email:
          type: string
        username:
          type: string
        is_active:
          type: boolean
        role_id:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BookDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        isbn:
          type: string
        title:
          type: string
        cover_url:
          type: string
        authors:
          type: array
          items:
            $ref: "#/components/schemas/AuthorDto"
        price:
          type: number
        is_available_online:
          type: boolean
        published_at:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AuthorDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AppExceptionDto:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        status:
          type: integer
        details:
          type: object
          additionalProperties:
            type: string
        path:
          type: string
        timestamp:
          format: date-time

  responses:
    Created:
      description: Created
    NoContent:
      description: No content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AppExceptionDto"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
